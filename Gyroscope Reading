#include <Wire.h>
#include <MPU6050_tockn.h>

// Set the I2C pins
#define I2C_SDA 21
#define I2C_SCL 22

MPU6050 mpu6050(Wire); // Initializes the MPU6050 object

void setup() {
    Serial.begin(115200);  // Initializes serial communication at a rate of 115200 bps

    // Initializes the I2C bus with the SDA and SCL pins defined
    Wire.begin(I2C_SDA, I2C_SCL);

    // Checks I2C communication
    Serial.println("Scanning I2C bus...");
    byte deviceCount = 0;
    for (byte address = 1; address < 120; ++address) {
        Wire.beginTransmission(address);
        if (Wire.endTransmission() == 0) {
            Serial.print("I2C device found at address 0x");
            if (address < 16) {
                Serial.print("0");
            }
            Serial.println(address, HEX);
            ++deviceCount;
            delay(10);  // Short break for stabilization
        }
    }
    Serial.print("Found ");
    Serial.print(deviceCount);
    Serial.println(" I2C devices.");

    // MPU6050 Sensor Initial Settings
    if (deviceCount > 0) {
        mpu6050.begin();                // Initialize the MPU6050
        mpu6050.calcGyroOffsets(true);  // Calculates gyroscope offsets
        Serial.println("MPU6050 initialized.");
    } else {
        Serial.println("No I2C devices found. Please check connections.");
    }
}

void loop() {
    // Updates sensor data
    mpu6050.update();

    // Checks if 1.5 sec has passed to send the data
    static unsigned long lastPrintTime = 0;
    if (millis() - lastPrintTime > 1500) {
                

        // Prints gyroscope readings
        Serial.print("X:");
        Serial.print(mpu6050.getGyroAngleX()); 
        Serial.print("\t");
        Serial.print("Y:");
        Serial.print(mpu6050.getGyroAngleY()); 
        Serial.print("\t");
        Serial.print("Z:");
        Serial.print(mpu6050.getGyroAngleZ());  
        Serial.println("");

        lastPrintTime = millis();  // Update the timer
    }
}
